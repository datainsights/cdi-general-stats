[["index.html", "Statistical Analysis &amp; Hypothesis Testing ", " Statistical Analysis &amp; Hypothesis Testing Last updated: July 02, 2025 "],["welcome-to-the-general-data-science-statistical-analysis-stats-layer.html", "Welcome to the General Data Science ‚Äì Statistical Analysis (STATS) Layer üìò What You‚Äôll Learn", " Welcome to the General Data Science ‚Äì Statistical Analysis (STATS) Layer Welcome to Complex Data Insights (CDI) ‚Äî a dynamic learning system where data science is taught through real questions, practical code, and critical thinking. This guide ‚Äî the General Data Science: Free Q&amp;A Edition ‚Äî continues your journey through the CDI ecosystem, now focusing on Statistical Analysis. It‚Äôs built for learners who want to go beyond cleaning and visualizing data ‚Äî and start making informed, data-driven decisions using core statistical methods in both Python and R. Each Q&amp;A walks you through not just the calculations, but also the interpretations that matter in real-world analysis. üìò What You‚Äôll Learn In this Statistical Analysis (STATS) layer, you‚Äôll explore how to: ‚úÖ Frame hypotheses and apply statistical reasoning üìà Perform tests like t-tests, ANOVA, and correlation analysis üîç Understand p-values, confidence intervals, and assumptions üß† Interpret results and connect them to meaningful questions All guides include: Side-by-side code in Python and R Real-world datasets used across multiple Q&amp;A entries Step-by-step explanations to reinforce concepts and build intuition "],["what-are-summary-statistics-and-how-do-you-compute-them.html", "Q&A 1 What are summary statistics and how do you compute them? 1.1 Explanation 1.2 Python Code 1.3 R Code", " Q&A 1 What are summary statistics and how do you compute them? 1.1 Explanation Summary statistics provide a quick overview of the distribution and central tendency of a dataset. They include measures like mean, median, mode, standard deviation, min, max, and quantiles. 1.2 Python Code import pandas as pd # Load sample data df = pd.read_csv(&quot;data/iris.csv&quot;) # Summary statistics summary = df.describe() print(summary) sepal_length sepal_width petal_length petal_width count 150.000000 150.000000 150.000000 150.000000 mean 5.843333 3.057333 3.758000 1.199333 std 0.828066 0.435866 1.765298 0.762238 min 4.300000 2.000000 1.000000 0.100000 25% 5.100000 2.800000 1.600000 0.300000 50% 5.800000 3.000000 4.350000 1.300000 75% 6.400000 3.300000 5.100000 1.800000 max 7.900000 4.400000 6.900000 2.500000 1.3 R Code library(readr) library(dplyr) # Load sample data df &lt;- read_csv(&quot;data/iris.csv&quot;) # Summary statistics summary(df) sepal_length sepal_width petal_length petal_width Min. :4.300 Min. :2.000 Min. :1.000 Min. :0.100 1st Qu.:5.100 1st Qu.:2.800 1st Qu.:1.600 1st Qu.:0.300 Median :5.800 Median :3.000 Median :4.350 Median :1.300 Mean :5.843 Mean :3.057 Mean :3.758 Mean :1.199 3rd Qu.:6.400 3rd Qu.:3.300 3rd Qu.:5.100 3rd Qu.:1.800 Max. :7.900 Max. :4.400 Max. :6.900 Max. :2.500 species Length:150 Class :character Mode :character "],["how-do-you-test-if-the-mean-of-two-groups-is-significantly-different.html", "Q&A 2 How do you test if the mean of two groups is significantly different? 2.1 Explanation 2.2 Python Code 2.3 R Code", " Q&A 2 How do you test if the mean of two groups is significantly different? 2.1 Explanation You can use a t-test to compare the means of two independent groups. This test checks whether the difference in means is statistically significant. 2.2 Python Code import pandas as pd from scipy.stats import ttest_ind # Load sample data df = pd.read_csv(&quot;data/iris.csv&quot;) # t-test between two species group1 = df[df[&#39;species&#39;] == &#39;setosa&#39;][&#39;sepal_length&#39;] group2 = df[df[&#39;species&#39;] == &#39;versicolor&#39;][&#39;sepal_length&#39;] t_stat, p_val = ttest_ind(group1, group2) print(f&quot;T-statistic: {t_stat}, P-value: {p_val}&quot;) T-statistic: -10.52098626754911, P-value: 8.985235037487079e-18 2.3 R Code library(readr) library(dplyr) # Load data df &lt;- read_csv(&quot;data/iris.csv&quot;) # t-test between two species setosa &lt;- df %&gt;% filter(species == &quot;setosa&quot;) %&gt;% pull(sepal_length) versicolor &lt;- df %&gt;% filter(species == &quot;versicolor&quot;) %&gt;% pull(sepal_length) t.test(setosa, versicolor) Welch Two Sample t-test data: setosa and versicolor t = -10.521, df = 86.538, p-value &lt; 2.2e-16 alternative hypothesis: true difference in means is not equal to 0 95 percent confidence interval: -1.1057074 -0.7542926 sample estimates: mean of x mean of y 5.006 5.936 "],["how-do-you-compute-the-correlation-between-two-variables.html", "Q&A 3 How do you compute the correlation between two variables? 3.1 Explanation 3.2 Python Code 3.3 R Code", " Q&A 3 How do you compute the correlation between two variables? 3.1 Explanation Correlation measures the strength and direction of a linear relationship between two variables. The Pearson correlation coefficient ranges from -1 to 1. 3.2 Python Code import pandas as pd # Load sample data df = pd.read_csv(&quot;data/iris.csv&quot;) # Pearson correlation between sepal length and sepal width correlation = df[&quot;sepal_length&quot;].corr(df[&quot;sepal_width&quot;]) print(&quot;Correlation:&quot;, correlation) Correlation: -0.11756978413300208 3.3 R Code library(readr) # Load sample data df &lt;- read_csv(&quot;data/iris.csv&quot;) # Pearson correlation cor(df$sepal_length, df$sepal_width) [1] -0.1175698 "],["what-is-a-confidence-interval-and-how-do-you-calculate-it.html", "Q&A 4 What is a confidence interval and how do you calculate it? 4.1 Explanation 4.2 Python Code 4.3 R Code", " Q&A 4 What is a confidence interval and how do you calculate it? 4.1 Explanation A confidence interval provides a range of values that is likely to contain the population parameter. Typically, a 95% confidence interval is used to estimate the mean. 4.2 Python Code import pandas as pd from scipy import stats import numpy as np # Load sample data df = pd.read_csv(&quot;data/iris.csv&quot;) data = df[&quot;sepal_length&quot;] # Compute 95% confidence interval mean = np.mean(data) sem = stats.sem(data) conf_int = stats.t.interval(0.95, len(data)-1, loc=mean, scale=sem) print(f&quot;95% Confidence Interval: {conf_int}&quot;) 95% Confidence Interval: (np.float64(5.709732481507366), np.float64(5.976934185159301)) 4.3 R Code library(readr) # Load sample data df &lt;- read_csv(&quot;data/iris.csv&quot;) data &lt;- df$sepal_length # 95% confidence interval t.test(data)$conf.int [1] 5.709732 5.976934 attr(,&quot;conf.level&quot;) [1] 0.95 "],["how-do-you-perform-a-one-way-anova.html", "Q&A 5 How do you perform a one-way ANOVA? 5.1 Explanation 5.2 Python Code 5.3 R Code", " Q&A 5 How do you perform a one-way ANOVA? 5.1 Explanation ANOVA (Analysis of Variance) is used to compare means across more than two groups. It tests the null hypothesis that all groups have the same mean. 5.2 Python Code import pandas as pd from scipy.stats import f_oneway # Load sample data df = pd.read_csv(&quot;data/iris.csv&quot;) # Group by species setosa = df[df[&quot;species&quot;] == &quot;setosa&quot;][&quot;sepal_length&quot;] versicolor = df[df[&quot;species&quot;] == &quot;versicolor&quot;][&quot;sepal_length&quot;] virginica = df[df[&quot;species&quot;] == &quot;virginica&quot;][&quot;sepal_length&quot;] # Perform ANOVA f_stat, p_val = f_oneway(setosa, versicolor, virginica) print(f&quot;F-statistic: {f_stat}, P-value: {p_val}&quot;) F-statistic: 119.26450218450468, P-value: 1.6696691907693826e-31 5.3 R Code library(readr) # Load sample data df &lt;- read_csv(&quot;data/iris.csv&quot;) # Perform one-way ANOVA anova_result &lt;- aov(sepal_length ~ species, data = df) summary(anova_result) Df Sum Sq Mean Sq F value Pr(&gt;F) species 2 63.21 31.606 119.3 &lt;2e-16 *** Residuals 147 38.96 0.265 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 "],["how-do-you-interpret-a-p-value-in-hypothesis-testing.html", "Q&A 6 How do you interpret a p-value in hypothesis testing? 6.1 Explanation 6.2 Python Code 6.3 R Code", " Q&A 6 How do you interpret a p-value in hypothesis testing? 6.1 Explanation The p-value represents the probability of observing the data (or something more extreme) if the null hypothesis is true. A smaller p-value indicates stronger evidence against the null hypothesis. 6.2 Python Code # P-value is typically output by test functions, e.g., t-test, ANOVA # Interpret p &lt; 0.05 as statistically significant print(&quot;If p &lt; 0.05, we reject the null hypothesis.&quot;) If p &lt; 0.05, we reject the null hypothesis. 6.3 R Code # P-values are returned by tests such as t.test or aov # Print interpretation guide cat(&quot;If p &lt; 0.05, we reject the null hypothesis.\\n&quot;) If p &lt; 0.05, we reject the null hypothesis. "],["what-are-summary-statistics-and-how-do-you-compute-them-1.html", "Q&A 7 What are summary statistics and how do you compute them? 7.1 Explanation 7.2 Python Code 7.3 R Code", " Q&A 7 What are summary statistics and how do you compute them? 7.1 Explanation Summary statistics provide a quick overview of the distribution and central tendency of a dataset. They include measures like mean, median, mode, standard deviation, min, max, and quantiles. 7.2 Python Code import pandas as pd # Load sample data df = pd.read_csv(&quot;data/iris.csv&quot;) # Summary statistics summary = df.describe() print(summary) sepal_length sepal_width petal_length petal_width count 150.000000 150.000000 150.000000 150.000000 mean 5.843333 3.057333 3.758000 1.199333 std 0.828066 0.435866 1.765298 0.762238 min 4.300000 2.000000 1.000000 0.100000 25% 5.100000 2.800000 1.600000 0.300000 50% 5.800000 3.000000 4.350000 1.300000 75% 6.400000 3.300000 5.100000 1.800000 max 7.900000 4.400000 6.900000 2.500000 7.3 R Code library(readr) library(dplyr) # Load sample data df &lt;- read_csv(&quot;data/iris.csv&quot;) # Summary statistics summary(df) sepal_length sepal_width petal_length petal_width Min. :4.300 Min. :2.000 Min. :1.000 Min. :0.100 1st Qu.:5.100 1st Qu.:2.800 1st Qu.:1.600 1st Qu.:0.300 Median :5.800 Median :3.000 Median :4.350 Median :1.300 Mean :5.843 Mean :3.057 Mean :3.758 Mean :1.199 3rd Qu.:6.400 3rd Qu.:3.300 3rd Qu.:5.100 3rd Qu.:1.800 Max. :7.900 Max. :4.400 Max. :6.900 Max. :2.500 species Length:150 Class :character Mode :character "],["how-do-you-test-if-the-mean-of-two-groups-is-significantly-different-1.html", "Q&A 8 How do you test if the mean of two groups is significantly different? 8.1 Explanation 8.2 R Code", " Q&A 8 How do you test if the mean of two groups is significantly different? 8.1 Explanation You can use a t-test to compare the means of two independent groups. This test checks whether the difference in means is statistically significant. ## Python Code import pandas as pd from scipy.stats import ttest_ind # Load sample data df = pd.read_csv(&quot;data/iris.csv&quot;) # t-test between two species group1 = df[df[&#39;species&#39;] == &#39;setosa&#39;][&#39;sepal_length&#39;] group2 = df[df[&#39;species&#39;] == &#39;versicolor&#39;][&#39;sepal_length&#39;] t_stat, p_val = ttest_ind(group1, group2) print(f&quot;T-statistic: {t_stat}, P-value: {p_val}&quot;) T-statistic: -10.52098626754911, P-value: 8.985235037487079e-18 8.2 R Code library(readr) library(dplyr) # Load data df &lt;- read_csv(&quot;data/iris.csv&quot;) # t-test between two species setosa &lt;- df %&gt;% filter(species == &quot;setosa&quot;) %&gt;% pull(sepal_length) versicolor &lt;- df %&gt;% filter(species == &quot;versicolor&quot;) %&gt;% pull(sepal_length) t.test(setosa, versicolor) Welch Two Sample t-test data: setosa and versicolor t = -10.521, df = 86.538, p-value &lt; 2.2e-16 alternative hypothesis: true difference in means is not equal to 0 95 percent confidence interval: -1.1057074 -0.7542926 sample estimates: mean of x mean of y 5.006 5.936 "],["how-do-you-compute-the-correlation-between-two-variables-1.html", "Q&A 9 How do you compute the correlation between two variables? 9.1 Explanation 9.2 R Code", " Q&A 9 How do you compute the correlation between two variables? 9.1 Explanation Correlation measures the strength and direction of a linear relationship between two variables. The Pearson correlation coefficient ranges from -1 to 1. ## Python Code import pandas as pd # Load sample data df = pd.read_csv(&quot;data/iris.csv&quot;) # Pearson correlation between sepal length and sepal width correlation = df[&quot;sepal_length&quot;].corr(df[&quot;sepal_width&quot;]) print(&quot;Correlation:&quot;, correlation) Correlation: -0.11756978413300208 9.2 R Code library(readr) # Load sample data df &lt;- read_csv(&quot;data/iris.csv&quot;) # Pearson correlation cor(df$sepal_length, df$sepal_width) [1] -0.1175698 "],["what-is-a-confidence-interval-and-how-do-you-calculate-it-1.html", "Q&A 10 What is a confidence interval and how do you calculate it? 10.1 Explanation 10.2 R Code", " Q&A 10 What is a confidence interval and how do you calculate it? 10.1 Explanation A confidence interval provides a range of values that is likely to contain the population parameter. Typically, a 95% confidence interval is used to estimate the mean. ## Python Code import pandas as pd from scipy import stats import numpy as np # Load sample data df = pd.read_csv(&quot;data/iris.csv&quot;) data = df[&quot;sepal_length&quot;] # Compute 95% confidence interval mean = np.mean(data) sem = stats.sem(data) conf_int = stats.t.interval(0.95, len(data)-1, loc=mean, scale=sem) print(f&quot;95% Confidence Interval: {conf_int}&quot;) 95% Confidence Interval: (np.float64(5.709732481507366), np.float64(5.976934185159301)) 10.2 R Code library(readr) # Load sample data df &lt;- read_csv(&quot;data/iris.csv&quot;) data &lt;- df$sepal_length # 95% confidence interval t.test(data)$conf.int [1] 5.709732 5.976934 attr(,&quot;conf.level&quot;) [1] 0.95 "],["how-do-you-use-a-chi-squared-test-to-determine-if-two-categorical-variables-are-independent.html", "Q&A 11 How do you use a chi-squared test to determine if two categorical variables are independent? 11.1 Explanation 11.2 Python Code 11.3 R Code", " Q&A 11 How do you use a chi-squared test to determine if two categorical variables are independent? 11.1 Explanation This question demonstrates how to perform a chi-squared test of independence to assess the relationship between two categorical variables. The chi-squared statistic tests whether distributions of categorical variables differ from each other, based on a contingency table. 11.2 Python Code import pandas as pd import scipy.stats as stats # Sample contingency table data = pd.DataFrame({ &quot;A&quot;: [20, 15], &quot;B&quot;: [30, 35] }, index=[&quot;Yes&quot;, &quot;No&quot;]) # Chi-squared test chi2, p, dof, expected = stats.chi2_contingency(data) print(f&quot;Chi2: {chi2:.2f}, p-value: {p:.4f}&quot;) Chi2: 0.70, p-value: 0.4017 11.3 R Code # Create a contingency table data &lt;- matrix(c(20, 30, 15, 35), nrow = 2, byrow = TRUE) colnames(data) &lt;- c(&quot;A&quot;, &quot;B&quot;) rownames(data) &lt;- c(&quot;Yes&quot;, &quot;No&quot;) # Perform chi-squared test test &lt;- chisq.test(data) test Pearson&#39;s Chi-squared test with Yates&#39; continuity correction data: data X-squared = 0.7033, df = 1, p-value = 0.4017 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
